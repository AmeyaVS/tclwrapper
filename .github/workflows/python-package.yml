# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python tclwrapper package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest --cov --cov-report=lcov
    - name: Coveralls GitHub Action
      # You may pin to the exact commit or the version.
      # uses: coverallsapp/github-action@3dfc5567390f6fa9267c0ee9c251e4c8c3f18949
      uses: coverallsapp/github-action@v2
      with:
        # Put secrets.GITHUB_TOKEN here
        github-token: ${{ github.COVERALLS_REPO_TOKEN }} # optional, default is ${{ github.token }}
        # Path to lcov file [DEPRECATED]
        path-to-lcov: # optional
        # Coverage file
        file: # optional
        # Space-separated list of coverage files
        files: # optional
        # Force coverage format, supported formats: lcov, simplecov, cobertura, jacoco, gcov, golang, python
        format: # optional
        # Job flag name, e.g. "Unit", "Functional", or "Integration". Will be shown in the Coveralls UI.
        flag-name: # optional
        # Set to true if you are running parallel jobs, then use "parallel-finished: true" for the last action.
        parallel: # optional
        # Set to true for the last action when using "parallel: true".
        parallel-finished: # optional
        # Comma separated flags used to carryforward results from previous builds if some of the parallel jobs are missing.
        carryforward: # optional
        # Coveralls Enterprise server (more info: https://enterprise.coveralls.io)
        coveralls-endpoint: # optional, default is https://coveralls.io
        # Don't fail when coverage report file is empty or contains no data
        allow-empty: # optional
        # The root folder of the project that originally ran the tests
        base-path: # optional
        # Override the branch name
        git-branch: # optional
        # Override the commit sha
        git-commit: # optional
        # Branch name to use as the base for coverage results
        compare-ref: # optional
        # Commit SHA to use as the base for coverage results
        compare-sha: # optional
        # Enable debug output
        debug: # optional
        # Show execution time of parsing and reporting
        measure: # optional
        # Whether to fail (exit code 1) on any issues while uploading the coverage
        fail-on-error: # optional, default is true
